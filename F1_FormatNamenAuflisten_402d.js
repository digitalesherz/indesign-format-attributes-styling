//F1_FormatNamenAuflisten_402d.js / CS4//© 28.11.08 / Hans Haesler, Châtelard 52, CH-1018 Lausanne//Dieses Script setzt die Namen der Absatz- und der Zeichenvorlagen //in zwei benannte Rahmen. Diese Listen können editiert werden (ganze //Zeilen entfernen). Dann das Script "FormatAttribute" starten, in den //Menüs das Sternchen einstellen. Auf "OK" werden nur die Attribute der //Formate in der Liste ausgezogen und in ein neues Dokument eingesetzt.//Wichtig: Wenn Formatgruppen vorhanden sind, dann müssen die Namen der //Gruppen erhalten bleiben. Es sei denn, die zugehörigen Formatnamen //würden alle entfernt.//Die Namen der Formate dürfen nicht verändert werden. Das gilt auch //für die drei Leerräume, welche vor jedem Namen eingefügt wurden.if (app.documents.length == 0) {	alert ("Es ist kein Dokument offen.", "Achtung");	exit();}// den Nullpunkt auf Null/Null setzenapp.documents[0].zeroPoint = [0,0];// das Zeichenformat auf "Kein" setzenvar noCharStyle = app.documents[0].characterStyles.item(0);app.documents[0].textDefaults.appliedCharacterStyle = noCharStyle;// das Absatzformat auf "Einfacher Absatz" setzenvar dfParaStyle = app.documents[0].paragraphStyles.item(1);app.documents[0].textDefaults.appliedParagraphStyle = dfParaStyle;// eventuell vorhandene Rahmen entfernen. Sonst würde ein Laufzeitfehler generiert, // weil das "FormatAttribute"-Script nur einen Rahmen jeder Sorte erwartettry {	app.documents[0].textFrames.item("ParaStyles").remove();}catch (e) {}try {	app.documents[0].textFrames.item("CharStyles").remove();}catch (e) {}// prüfen, ob Absatzformatgruppen bestehenparaGroups = app.documents[0].paragraphStyleGroups;var nPSG = paraGroups.length;// prüfen, ob Zeichenformatgruppen bestehencharGroups = app.documents[0].characterStyleGroups;var nCSG = charGroups.length;//--- die Liste der Absatzformatnamen aufstellen ---//if (nPSG == 0) {	var allParaStyles = app.documents[0].paragraphStyles.everyItem().name;	// das erste Element entfernen	allParaStyles.shift();}else {	var allParaStyles = app.documents[0].paragraphStyles.everyItem().name;	// bei jedem Element drei Leerräume einfügen	for (var i=0; i<allParaStyles.length; i++) {		curName = "   " + allParaStyles[i];		allParaStyles[i] = curName;	}	// das erste Element durch "[Root]" ersetzen	allParaStyles[0] = "[Root]";	// eine Schleife durch die Gruppen	for (var i=0; i<nPSG; i++) {		var curGroup = paraGroups[i];		var curParaStyles = curGroup.paragraphStyles.everyItem().name;		// bei jedem Element drei Leerräume einfügen		for (var k=0; k<curParaStyles.length; k++) {			curName = "   " + curParaStyles[k];			curParaStyles[k] = curName;		}		// ein Element mit dem Namen der Gruppe voranstellen		curParaStyles = [curGroup.name].concat(curParaStyles);		allParaStyles = allParaStyles.concat(curParaStyles);	}}// die Liste in eine Textkette verwandelnvar paraString = allParaStyles.join("\r");// einen Textrahmen erzeugenvar paraFrame = app.documents[0].pages[0].textFrames.add();paraFrame.properties = {geometricBounds:[12, 15, 285, 105.5], fillColor:"Paper", label:"ParaStyles"};// die vorbereitete Textkette in den Rahmen einsetzenparaFrame.parentStory.contents = paraString;//--- die Liste der Zeichenformatnamen aufstellen ---//if (nCSG == 0) {	var allCharStyles = app.documents[0].characterStyles.everyItem().name;	// das erste Element entfernen	allCharStyles.shift();}else {	var allCharStyles = app.documents[0].characterStyles.everyItem().name;	// bei jedem Element drei Leerräume einfügen	for (var i=0; i<allCharStyles.length; i++) {		curName = "   " + allCharStyles[i];		allCharStyles[i] = curName;	}	// das erste Element durch "[Root]" ersetzen	allCharStyles[0] = "[Root]";	// eine Schleife durch die Gruppen	for (var i=0; i<nCSG; i++) {		var curGroup = charGroups[i];		var curCharStyles = curGroup.characterStyles.everyItem().name;		// bei jedem Element drei Leerräume einfügen		for (var k=0; k<curCharStyles.length; k++) {			curName = "   " + curCharStyles[k];			curCharStyles[k] = curName;		}		// ein Element mit dem Namen der Gruppe voranstellen		curCharStyles = [curGroup.name].concat(curCharStyles);		allCharStyles = allCharStyles.concat(curCharStyles);	}}// die Liste in eine Textkette verwandelnvar charString = allCharStyles.join("\r");// einen Textrahmen erzeugenvar charFrame = app.documents[0].pages[0].textFrames.add();charFrame.properties = {geometricBounds:[12, 109.5, 285, 200], fillColor:"Paper", label:"CharStyles"};// die vorbereitete Textkette in den Rahmen einsetzencharFrame.parentStory.contents = charString;